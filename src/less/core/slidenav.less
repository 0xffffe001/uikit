// Name:            Slidenav
// Description:     Component to create a previous/next icon navigation
//
// Component:       `uk-slidenav`
//
// Sub-objects:     `uk-slidenav-container`
//
// Modifiers:       `uk-slidenav-previous`
//                  `uk-slidenav-next`
//
// ========================================================================


// Variables
// ========================================================================

@slidenav-padding:                              5px;
@slidenav-color:                                fadeout(@global-color, 40%);

@slidenav-hover-color:                          fadeout(@global-color, 20%);

@slidenav-active-color:                         fadeout(@global-color, 10%);


/* ========================================================================
   Component: Slidenav
 ========================================================================== */

/*
 * Pass image path to JS
 */

.uk-slidenav::before { background-image: url("../../images/icons.svg"); }

/*
 * 1. Fill the SVG object with the current text color
 * 2. Let the container fit the height of the icon
 * 3. Style
 */

.uk-slidenav {
    display: inline-block;
    padding: @slidenav-padding;
    /* 1 */
    fill: currentcolor;
    /* 2 */
    line-height: 0;
    vertical-align: middle;
    /* 3 */
    color: @slidenav-color;
    .hook-slidenav;
}

/* Let the line drawn around the SVG object use the current text color
 * But only if a `stroke-width` attribute is present, because its default value is `1`
 */

.uk-slidenav [stroke-width] { stroke: currentcolor; }

/*
 * Fix Firefox blurry SVG rendering: https://bugzilla.mozilla.org/show_bug.cgi?id=1046835
 */

.uk-slidenav > * { transform: translate(0,0); }

/* Hover + Focus */
.uk-slidenav:hover,
.uk-slidenav:focus {
    color: @slidenav-hover-color;
    outline: none;
    .hook-slidenav-hover;
}

/* Active */
.uk-slidenav:active {
    color: @slidenav-active-color;
    .hook-slidenav-active;
}


/* Icon modifier
 ========================================================================== */

[uk-slidenav*='previous'] {
    .hook-slidenav-previous;
}

[uk-slidenav*='next'] {
    .hook-slidenav-next;
}


/* Container
 ========================================================================== */

.uk-slidenav-container {
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    .hook-slidenav-container;
}


// Hooks
// ========================================================================

.hook-slidenav-misc;

.hook-slidenav() {}
.hook-slidenav-hover() {}
.hook-slidenav-active() {}
.hook-slidenav-previous() {}
.hook-slidenav-next() {}
.hook-slidenav-container() {}
.hook-slidenav-misc() {}


// Dye
// ========================================================================

.dye-vars-default() {

    @slidenav-color:                       fadeout(@dye-color, 40%);
    @slidenav-hover-color:                 fadeout(@dye-color, 20%);
    @slidenav-active-color:                fadeout(@dye-color, 10%);

}

.dye() {

    .dye-vars();
    .dye-hooks();

    .uk-slidenav {
        color: @slidenav-color;
        .hook-dye-slidenav;
    }

    .uk-slidenav:hover,
    .uk-slidenav:focus {
        color: @slidenav-hover-color;
        .hook-dye-slidenav-hover;
    }

    .uk-slidenav:active {
        color: @slidenav-active-color;
        .hook-dye-slidenav-active;
    }

}

.hook-dye-slidenav() {}
.hook-dye-slidenav-hover() {}
.hook-dye-slidenav-active() {}
