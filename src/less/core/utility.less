// Name:            Utility
// Description:     Utilities collection
//
// Component:       `uk-panel-*`
//                  `uk-clearfix`
//                  `uk-float-*`
//                  `uk-overflow-*`
//                  `uk-display-*`
//                  `uk-inline-container`
//                  `uk-height-*`
//                  `uk-responsive-*`
//                  `uk-preserve-width`
//                  `uk-maxwidth-*`
//                  `uk-border-*`
//                  `uk-dropcap`
//                  `uk-logo`
//                  `uk-blend-*`
//
// States:          `uk-disabled`
//
// ========================================================================


// Variables
// ========================================================================

@panel-scrollable-height:                       170px;
@panel-scrollable-padding:                      10px;
@panel-scrollable-border:                       @global-border;
@panel-scrollable-border-width:                 @global-border-width;

@maxwidth-small-max-width:                      280px;
@maxwidth-medium-max-width:                     800px;

@border-rounded-border:                         5px;

@dropcap-margin-right:                          10px;
@dropcap-font-size:                             ((@global-line-height * 3) * 1em);

@logo-font-size:                                @global-large-font-size;
@logo-font-family:                              @global-font-family;
@logo-color:                                    @global-color;
@logo-hover-color:                              @global-color;


/* ========================================================================
   Component: Utility
 ========================================================================== */


/* Panel
 ========================================================================== */

.uk-panel {
    position: relative;
    box-sizing: border-box;
}

/*
 * Micro clearfix
 */

.uk-panel::before,
.uk-panel::after {
    content: "";
    display: table;
}

.uk-panel::after { clear: both; }

/*
 * Remove margin from the last-child
 */

.uk-panel > :last-child { margin-bottom: 0; }


/*
 * Scrollable
 */

.uk-panel-scrollable {
    height: @panel-scrollable-height;
    padding: @panel-scrollable-padding;
    border: @panel-scrollable-border-width solid @panel-scrollable-border;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
    resize: both;
    .hook-panel-scrollable;
}


/* Clearfix
 ========================================================================== */

/*
 * 1. `table-cell` is used with `::before` because `table` creates a 1px gap when it becomes a flex item, only in Webkit
 * 2. `table` is used again with `::after` because `clear` only works with block elements.
 * Note: `display: block` with `overflow: hidden` is currently not working in the latest Safari
 */

/* 1 */
.uk-clearfix::before {
    content: "";
    display: table-cell;
}

/* 2 */
.uk-clearfix::after {
    content: "";
    display: table;
    clear: both;
}


/* Float
 ========================================================================== */

/*
 * 1. Prevent content overflow
 */

.uk-float-left { float: left; }
.uk-float-right { float: right; }

/* 1 */
[class*='uk-float-'] { max-width: 100%; }


/* Overfow
 ========================================================================== */

.uk-overflow-hidden { overflow: hidden; }

/*
 * Enable scrollbars if content is clipped
 */

.uk-overflow-auto {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

.uk-overflow-auto > :last-child { margin-bottom: 0; }


/* Display
 ========================================================================== */

/*
 * 1. Prevent content overflow
 */

.uk-display-block { display: block !important; }
.uk-display-inline { display: inline !important; }

.uk-display-inline-block {
    display: inline-block !important;
    /* 1 */
    max-width: 100%;
}


/* Inline Container
 ========================================================================== */

/*
 * 1. Container fits its content
 * 2. Behave like most inline-block elements
 * 3. Create position context
 */

.uk-inline-container {
    /* 1 */
    display: inline-block;
    /* 2 */
    vertical-align: middle;
    /* 3 */
    position: relative;
}


/* Height
 ========================================================================== */

[class*='uk-height'],
[uk-height-viewport] { box-sizing: border-box; }

/*
 * Only works if parent element has a height set
 */

.uk-height-1-1 { height: 100%; }

/*
 * Useful to create image teasers
 */

.uk-height-viewport { min-height: 100vh; }


/* Responsive objects
 * Note: Images are already responsive by default, see Base component
 ========================================================================== */

/*
 * 1. Corrects `max-width` and `max-height` behavior if padding and border are used
 */

.uk-responsive-width,
.uk-responsive-height,
[uk-responsive] { box-sizing: border-box; }

/*
 * Responsiveness: Sets a maximum width relative to the parent and auto scales the height
 * `important` needed to override `uk-img-preserve img`
 */

.uk-responsive-width,
[uk-responsive] {
    max-width: 100% !important;
    height: auto;
}

/*
 * Responsiveness: Sets a maximum height relative to the parent and auto scales the width
 * Only works if the parent element has a fixed height.
 */

.uk-responsive-height {
    max-height: 100%;
    width: auto;
}

/*
 * Preserve original dimensions
 */

.uk-preserve-width,
.uk-preserve-width audio,
.uk-preserve-width canvas,
.uk-preserve-width img,
.uk-preserve-width svg,
.uk-preserve-width video { max-width: none; }


/* Max width
 ========================================================================== */

.uk-maxwidth-small { max-width: @maxwidth-small-max-width; }
.uk-maxwidth-medium { max-width: @maxwidth-medium-max-width; }


/* Border
 ========================================================================== */

.uk-border-circle { border-radius: 50%; }
.uk-border-rounded { border-radius: @border-rounded-border; }


/* Drop cap
 ========================================================================== */

.uk-dropcap::first-letter,
.uk-dropcap p:first-of-type::first-letter {
    display: block;
    margin-right: @dropcap-margin-right;
    float: left;
    font-size: @dropcap-font-size;
    line-height: 1;
    .hook-dropcap;
}


/* Logo
 ========================================================================== */

/*
 * 1. Required for `a`
 */

.uk-logo {
    font-size: @logo-font-size;
    font-family: @logo-font-family;
    color: @logo-color;
    /* 1 */
    text-decoration: none;
    .hook-logo;
}

/* Hover + Focus */
.uk-logo:hover,
.uk-logo:focus {
    color: @logo-hover-color;
    outline: none;
    /* 1 */
    text-decoration: none;
    .hook-logo-hover;
}

.uk-logo-inverse { display: none; }


/* Disabled
 ========================================================================== */

.uk-disabled { pointer-events: none; }


/* Blend modes
 ========================================================================== */

.uk-blend-multiply { mix-blend-mode: multiply; }
.uk-blend-screen { mix-blend-mode: screen; }
.uk-blend-overlay { mix-blend-mode: overlay; }
.uk-blend-darken { mix-blend-mode: darken; }
.uk-blend-lighten { mix-blend-mode: lighten; }
.uk-blend-color-dodge { mix-blend-mode: color-dodge; }
.uk-blend-color-burn { mix-blend-mode: color-burn; }
.uk-blend-hard-light { mix-blend-mode: hard-light; }
.uk-blend-soft-light { mix-blend-mode: soft-light; }
.uk-blend-difference { mix-blend-mode: difference; }
.uk-blend-exclusion { mix-blend-mode: exclusion; }
.uk-blend-hue { mix-blend-mode: hue; }
.uk-blend-saturation { mix-blend-mode: saturation; }
.uk-blend-color { mix-blend-mode: color; }
.uk-blend-luminosity { mix-blend-mode: luminosity; }


// Hooks
// ========================================================================

.hook-utility-misc;

.hook-panel-scrollable() {}
.hook-dropcap() {}
.hook-logo() {}
.hook-logo-hover() {}
.hook-utility-misc() {}


// Dye
// ========================================================================

.dye-vars-default() {

    @logo-color:                           @dye-color;
    @logo-hover-color:                     @dye-color;

}

.dye() {

    .dye-vars();
    .dye-hooks();

    .uk-logo {
        color: @logo-color;
        .hook-dye-logo;
    }

    .uk-logo:hover,
    .uk-logo:focus {
        color: @logo-hover-color;
        .hook-dye-logo-hover;
    }

    .uk-logo > :not(.uk-logo-inverse) { display: none; }
    .uk-logo-inverse { display: inline; }

}

.hook-dye-logo() {}
.hook-dye-logo-hover() {}